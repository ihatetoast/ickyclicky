{"version":3,"sources":["components/stateless/Header.js","components/stateless/Instructions.js","messages.js","components/logical/Scores.js","components/logical/IckyCard.js","components/logical/CardGrid.js","components/logical/Message.js","components/logical/GameBoard.js","components/stateless/Footer.js","App.js","registerServiceWorker.js","index.js"],"names":["Header","className","Instructions","messages","Scores","props","score","topscore","IckyCard","onClick","e","validatePick","id","alt","name","src","image","CardList","alreadyPicked","state","picked","includes","resetGame","setState","shuffle","push","increaseScore","shuffledCards","arr","cloneDeep","ickies","length","randoIdx","Math","floor","random","splice","renderedIckies","map","icky","key","bind","this","Component","Message","message","GameBoard","randoMessage","sample","prevState","currentScore","CardGrid","renderMessage","Footer","tagline","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.8284ac8f.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => (\n  <header className=\"header\">\n    <h1>\n      <span>Icky</span> Clicky\n    </h1>\n  </header>\n);\n\n//stateless and implicit return\nexport default Header;\n//if time allows style the span to make the icky ... icky\n","import React from \"react\";\n\nconst Instructions = () => (\n  <div className=\"instructions\">\n    <h2>How to play Icky Clicky:</h2>\n    <p>\n      Click on an icky! If you click on an image more than one time, the game is\n      over, and you'll be judged harshly.\n    </p>\n  </div>\n);\n\nexport default Instructions;\n","const messages = [\n  \"Whoop-de-doo, Andrew!\",\n  \"Clickin' with flare, Clare.\",\n  \"Keep it up, pup\",\n  \"You're awesome, possum.\",\n  \"Clickin' like a beast!\",\n  \"Memory of an elephant.\",\n  \"You're an icky expert.\",\n  \"You amaze me, kitten.\",\n  \"I wish I were cool like you.\",\n  \"You're the best!\",\n  \"You do you.\",\n  \"PhD in clickery!\",\n  \"I'm nothing compared to you.\",\n  \"Clickey clickety click click clicky!\",\n  \"I love you the most.\",\n  \"Future Olympian.\"\n];\nexport default messages;\n","import React from \"react\";\n//static with \"staty\" until katy is ready for staty\nconst Scores = props => (\n  <div className=\"scoresDiv\">\n    <div>\n      <p>\n        Current score: <span className=\"scores\">{props.score}</span>\n      </p>\n    </div>\n    <div>\n      <p>\n        Top score: <span className=\"scores\">{props.topscore}</span>\n      </p>\n    </div>\n  </div>\n);\n\nexport default Scores;\n/*\nif time allows: style the lead into the scores one way and the actual number another. \n*/\n","import React from \"react\";\n\n//the indiv card created here. content = props\nconst IckyCard = props => (\n  <div\n    className=\"card\"\n    onClick={e => {\n      props.validatePick(props.id);\n    }}\n  >\n    <div className=\"img-frame\">\n      <img alt={props.name} src={props.image} />\n    </div>\n  </div>\n);\n\nexport default IckyCard;\n","import React, { Component } from \"react\";\n//using cloneDeep from lodash to copy array of ickies that doesn't end up just being a pointer:\nimport { cloneDeep } from \"lodash\";\n\nimport IckyCard from \"./IckyCard\";\nimport ickies from \"../../ickies.json\";\n\nclass CardList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      renderedIckies: [],\n      picked: []\n    };\n    this.shuffle = this.shuffle.bind(this);\n    this.validatePick = this.validatePick.bind(this);\n  }\n  componentWillMount() {\n    this.shuffle();\n  }\n\n  validatePick = id => {\n    const alreadyPicked = this.state.picked;\n    if (!alreadyPicked.includes(id)) {\n      alreadyPicked.push(id);\n      this.props.increaseScore();\n      this.shuffle();\n    } else {\n      this.props.resetGame();\n      this.setState({\n        picked: []\n      });\n      this.shuffle();\n    }\n  };\n\n  shuffle = () => {\n    const ickiesClone = cloneDeep(ickies);\n    let shuffledCards = [];\n    let arr = ickiesClone || [];\n    while (arr.length !== 0) {\n      let randoIdx = Math.floor(Math.random() * arr.length);\n      shuffledCards.push(arr[randoIdx]);\n      arr.splice(randoIdx, 1);\n    }\n    this.setState({\n      renderedIckies: shuffledCards\n        .splice(0, 4)\n        .map(icky => (\n          <IckyCard\n            validatePick={this.validatePick}\n            id={icky.id}\n            key={icky.id}\n            name={icky.name}\n            image={icky.image}\n          />\n        ))\n    });\n  };\n\n  render() {\n    return <div className=\"cardGrid\">{this.state.renderedIckies}</div>;\n  }\n}\n\nexport default CardList;\n","import React, { Component } from \"react\";\n\nclass Message extends Component {\n  render() {\n    return (\n      <div className=\"message\">\n        <h2>{this.props.message}</h2>\n      </div>\n    );\n  }\n}\n\nexport default Message;\n","import React, { Component, Fragment } from \"react\";\n//turdparty\nimport { sample } from \"lodash\";\n//data\nimport messages from \"../../messages.js\";\n\n//components\nimport Scores from \"./Scores\";\nimport CardGrid from \"./CardGrid\";\nimport Message from \"./Message\";\n\nclass GameBoard extends Component {\n  constructor(props) {\n    super(props);\n    this.increaseScore = this.increaseScore.bind(this);\n    this.resetGame = this.resetGame.bind(this);\n    this.state = {\n      score: 0,\n      topscore: 0,\n      message: \"Pick an icky, Mickey.\"\n    };\n  }\n  increaseScore = () => {\n    const randoMessage = sample(messages);\n    this.setState((prevState, props) => {\n      return {\n        score: prevState.score + 1,\n        message: randoMessage\n      };\n    });\n  };\n  resetGame = () => {\n    const currentScore = this.state.score;\n    if (this.state.score > this.state.topscore) {\n      this.setState({\n        topscore: currentScore,\n        score: 0,\n        message: \"Bugger. But that's a new top score!\"\n      });\n    } else {\n      this.setState({\n        score: 0,\n        message: \"You blew it, Hewitt.\"\n      });\n    }\n  };\n  render() {\n    return (\n      <Fragment>\n        <div className=\"scoresMessages\">\n          <Message message={this.state.message} />\n          <Scores score={this.state.score} topscore={this.state.topscore} />\n        </div>\n        <div className=\"gameBoard\">\n          <CardGrid\n            message={this.renderMessage}\n            increaseScore={this.increaseScore}\n            resetGame={this.resetGame}\n          />\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nexport default GameBoard;\n","import React from \"react\";\n\nconst Footer = props => (\n  <footer className=\"footer\">\n    <p>\n      Katy Cassidy | ihatetoast | <span>{props.tagline}</span>\n    </p>\n  </footer>\n);\n\nexport default Footer;\n","import React, { Component, Fragment } from \"react\";\nimport { sample } from \"lodash\";\n\nimport Header from \"./components/stateless/Header\";\nimport Instructions from \"./components/stateless/Instructions\";\nimport GameBoard from \"./components/logical/GameBoard\";\nimport Footer from \"./components/stateless/Footer\";\n\nclass App extends Component {\n  constructor(props) {\n    super();\n    this.state = {\n      tagline: [\n        \"is icky.\",\n        \"is angry bread.\",\n        \"crumbs ruin butter.\",\n        \"smells.\",\n        \"is the Putin of breakfasts.\",\n        \" ... it burns. It burrrrns!\"\n      ]\n    };\n  }\n  render() {\n    return (\n      <Fragment>\n        <Header />\n        <div className=\"game\">\n          <Instructions />\n          <GameBoard />\n        </div>\n        <Footer tagline={`Toast ${sample(this.state.tagline)}`} />\n      </Fragment>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './css/reset.css';\nimport './css/style.css';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}